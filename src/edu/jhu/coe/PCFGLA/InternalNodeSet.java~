package edu.jhu.coe.PCFGLA;

import edu.jhu.coe.util.Pair;

import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;

public class InternalNodeSet{

    private static Map<Pair<Integer,Integer>, Integer> internalSet = new HashMap<Pair<Integer,Integer>,Integer>();
    private static Map<Integer, Pair<Integer,Integer>> reverseMap = new HashMap<Integer, Pair<Integer,Integer>>();

    /**
     * field so we can ``backtrack:'' given (tag,sig) that is an internal node, get the (tag, sigPrime) that is the same as (tag,sig), but not-internal
    */
    private static Map<Pair<Integer,Integer>,Pair<Integer,Integer>> internalToNotLineage = new HashMap<Pair<Integer,Integer>,Pair<Integer,Integer>>();

    private static int internalNumber=0;

    public static int addInternal(int stateID, int substateID,int genStateID, int genSubstateID){
	if(isSubstateInternal(stateID, substateID))
	    return getInternalID(stateID, substateID);
	Pair<Integer,Integer> p = new Pair<Integer,Integer>(stateID, substateID);
	//map p to unique ID
	internalSet.put(p,new Integer(internalNumber));
	//unique ID to p
	reverseMap.put(new Integer(internalNumber), p);
	//p to its top-level ``generating'' fragment
	internalToNotLineage.put(p,new Pair<Integer,Integer>(genStateID, genSubstateID));

	internalNumber++;
	return internalNumber-1;
    }

    public static boolean isSubstateInternal(int stateID, int substateID){
	return internalSet.containsKey(new Pair<Integer,Integer>(stateID, substateID));
    }

    public static int getInternalID(int stateID, int substateID){
	return internalSet.containsKey(new Pair<Integer,Integer>(stateID, substateID))?internalSet.get(new Pair<Integer,Integer>(stateID,substateID)).intValue():-1;
    }

    public static String getStringRepresentation(int stateID, int substateID){
	return isSubstateInternal(stateID, substateID)?
	    ("*" + getInternalID(stateID, substateID)):"";
    }

}