package edu.jhu.coe.PCFGLA;

public class FragmentProbabilityComputer{

    private LatentStatistics latentStatistics;
    private CounterMap<Integer,Integer> unnormalizedSymbolCounter;
    private double gamma;

    public FragmentProbabilityComputer(LatentStatistics LS, CounterMap<Integer,Integer> uSymCounter, double gamma){
	latentStatistics = LS;
	unnormalizedSymbolCounter = uSymCounter;
	this.gamma = gamma;
    }

    public double computeForFragment(double prevProb, short rootTag, short rootSig, BerkeleyCompatibleFragment X){
	double numerator = (prevProb * unnormalizedSymbolCounter.getCount(rootTag, rootSig) * latentStatistics.getUpperCouplingFractionalCount(X, gamma)) - (gamma * latentStatistics.getValidBottomCountOf(X));
	double denominator = latentStatistics.getCountOfNTSymbol(rootTag, rootSig) - (gamma * latentStatistics.getGeneralValidBottomCountOf(rootTag, rootSig));
	return denominator==0?0.0:(numerator/denominator);
    }

    public double computeForComposition(double prevProb, short rootTag, short rootSig, BerkeleyCompatibleFragment X, BerkeleyCompatibleFragment Y){
	return 0.0;
    }
}