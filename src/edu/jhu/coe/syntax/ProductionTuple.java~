package edu.jhu.coe.syntax;

import edu.jhu.coe.PCFGLA.InternalNodeSet;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * An easy way of indicating a given production.
 * @author Frank Ferraro
 */
public class ProductionTuple{
    private short[] tags;
    private short[] sigs;
    private short[] ids;

    private String word;

    private boolean isUnary;
    private int length;
	
    public ProductionTuple(boolean isUnary){
	toggleUnary(isUnary);
	tags = new short[length];
	sigs = new short[length];
	ids = new short[length];
    }

    /**
     * Get the number of children that are internal.
     */
    public int getNumberOfInternal(){
	int sum=0;
	for(int i = 1; i<length;i++)
	    if(isInternal(i)) sum++;
	return sum;
    }

    public int getNumberOfNodes(){
	return length;
    }

    public void toggleUnary(boolean b){
	isUnary = b;
	length = isUnary ? 2 : 3;
    }

    public void addNT(int position, short tag, short sig, short id){
	addNT(position,tag,sig);
	ids[position] = id;
    }

    public void addNT(int position, int tag, int sig, int id){
	addNT(position, (short)tag, (short)sig, (short)id);
    }

    public void addNT(int position, short tag, short sig){
	if(position>=length || position < 0)
	    throw new Error("trying to create malformed ProductionTuple");
	tags[position]=tag;
	sigs[position]=sig;
    }

    public void addPreterminal(short tag, short sig, String word){
	tags[0]=tag; sigs[0]=sig;
	this.word = word;
    }
	
    public void addPreterminal(short tag, short sig, short id, String word){
	addPreterminal(tag,sig,word);
	ids[0]=id;
    }
	
    public void addPreterminal(int tag, int sig, int id, String word){
	addPreterminal((short)tag,(short)sig,word);
	ids[0]=(short)id;
    }

    public short assignIDs(short id){
	ids[0] = id;
	for(short i = 1; i< length; i++)
	    ids[i] = (short)(id+1);
	return (short)(id+length);
    }

    public short assignIDs(int id){
	return assignIDs((short)id);
    }
 
    public boolean isInternal(int position){
	return InternalNodeSet.isSubstateInternal(tags[position], sigs[position]);
    }

    public String toString(){
	if(length==0) return "";
	String s = tags[0]+"_"+sigs[0] + " ==> ";
	if(word!=null && word.length() > 0)
	    return s + word;
	for(int i=1;i<length;i++)
	    s += tags[i] + "_" + sigs[i] + " ";
	return s;//+" (length = " + length + ")";
    }

    public boolean equals(Object other){
	if(!(other instanceof ProductionTuple)) return false;
	ProductionTuple o = (ProductionTuple)other;
	if(o.length!=this.length) return false;
	if((o.word==null ^ this.word==null)) return false;
	for(int i=0;i<length;i++){
	    if(tags[i]!=o.tags[i] || this.sigs[i]!=o.sigs[i])
		return false;
	}
	return true;
    }

    public int hashCode(){
	int res = tags[0] << 16 | sigs[0];
	for(int i = 1; i<length; i++)
	    res += (tags[i] << 16 | sigs[i]);
	res += (word==null || word.length()==0)?word.hashCode():0;
	return res;
    }

} 
