package edu.jhu.coe.ling;

import edu.jhu.coe.PCFGLA.InternalNodeSet;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * An easy and (hopefully) efficient way of uniquely 
 * representing fragments, of arbitrary depth, that 
 * is compatible with the shared-structure rule format.
 *
 * @author Frank Ferraro
 */
public class BerkeleyCompatibleFragment{

    private List<ProductionTuple> fragment;
    private ProductionTuple root;
    private int numberOfNodes = 0;
    private int numberInternal = 0;

    private int currID=0;

    public BerkeleyCompatibleFragment(){
	fragment = new ArrayList<ProductionTuple>();
	root = null;
    }

    public void addTuple(ProductionTuple pt){
	if(!pt.isInternal(0)) {
	    if(root!=null)
		throw new Error("\"Root\" tuple already added to fragment");
	    root = pt;
	}
	currID = pt.assignIDs(currID);
	fragment.add(pt);
	numberOfNodes += pt.getNumberOfNodes();
	numberInternal += pt.getNumberOfInternal();
    }

    /**
     * TODO: Actually implement this!    
     */
    public void orderBreadthFirst(){
	//order the list to be in breadth-first order
	//recurse
	/*int limit = fragment.size();
	short[] Q = new short[2*numberInternal];
	int Qcounter = 0; int Qindex=0;
	int ID = 0;
	Q[0]=root.getTag(0); Q[1]=root.getSig(0);
	while(Qindex < Q.length){
	    //get the top of queue
	    //for any internal children (tag, sig)
	    //add them to the Q
	    //find the PT in fragment that corresponds to that
	    //

	    //set the IDs of the parent and children as appropriate
	    
	    ID++;
	}
	//find the "root" tuple
	//get children of root
	Q=null;*/
    }

    /**
     * An easy way of indicating a given production.
     */
    public class ProductionTuple{
	private short[] tags;
	private short[] sigs;
	private short[] ids;

	private boolean isUnary;
	private int length;
	
	public ProductionTuple(boolean isUnary){
	    toggleUnary(isUnary);
	    tags = new short[length];
	    sigs = new short[length];
	    ids = new short[length];
	}

	/**
	 * Get the number of children that are internal.
	 */
	public int getNumberOfInternal(){
	    int sum=0;
	    for(int i = 1; i<length;i++)
		if(isInternal(i)) sum++;
	    return sum;
	}

	public int getNumberOfNodes(){
	    return length;
	}

	public void toggleUnary(boolean b){
	    isUnary = b;
	    length = isUnary ? 2 : 3;
	}

	public void addNT(int position, short tag, short sig, short id){
	    if(position>=length || position < 0)
		throw new Error("trying to create malformed ProductionTuple");
	    tags[position]=tag;
	    sigs[position]=sig;
	    ids[position] = id;
	}


	public void addNT(int position, short tag, short sig){
	    if(position>=length || position < 0)
		throw new Error("trying to create malformed ProductionTuple");
	    tags[position]=tag;
	    sigs[position]=sig;
	}

	public short assignIDs(short id){
	    ids[0] = id;
	    for(short i = 1; i< length; i++)
		ids[i] = (short)(id+1);
	    return (short)(id+length);
	}

	public short assignIDs(int id){
	    return assignIDs((short)id);
	}
 
	public boolean isInternal(int position){
	    return InternalNodeSet.isSubstateInternal(tags[position], sigs[position]);
	}

    } 

}

